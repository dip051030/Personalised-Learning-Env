from enum import Enum
from typing import Optional, Union, List, Dict
from pydantic import BaseModel, Field
from datetime import datetime

from triton.profiler import deactivate


# -----------------------------
# ✅ ENUMS: Standard subject and content types
# -----------------------------

class ResourceSubject(str, Enum):
    """Academic subjects supported by the system."""
    PHYSICS = "physics"
    CHEMISTRY = "chemistry"
    MATH = "math"
    ENGLISH = "english"
    SCIENCE = "science"

class ContentType(str, Enum):
    """Types of educational content that can be generated or tracked."""
    LESSON = "lesson"
    QUIZ = "quiz"
    PROJECT = "project"
    PRACTICAL = "practical"

# -----------------------------
# ✅ CURRICULUM MODELS: Structure of the official curriculum
# -----------------------------

class Topic(BaseModel):
    """Represents a single topic in a curriculum unit."""
    topic_id: str
    description: str
    elaboration: str
    keywords: List[str]
    hours: int
    references: str

class Unit(BaseModel):
    """Groups multiple related topics under one curriculum unit."""
    unit: str
    topics: List[Topic]

class Objective(BaseModel):
    """Defines learning objectives for the subject."""
    id: int
    description: str

class PracticalActivity(BaseModel):
    """Describes practical experiments or lab work in the syllabus."""
    id: int
    description: str
    unit: str
    hours: int
    elaboration: str
    keywords: List[str]
    references: str

class InternalAssessmentComponent(BaseModel):
    """Details components of internal evaluation (e.g., class participation)."""
    description: str
    marks: int
    elaboration: str

class ExternalAssessment(BaseModel):
    """Structure of external board-level evaluation."""
    weightage: int
    description: str
    references: str

class AssessmentApproach(BaseModel):
    """Skills-based evaluation methods used in learning facilitation."""
    type: str
    description: str
    marks: int
    elaboration: str

class LearningFacilitation(BaseModel):
    """Teaching methods and assessment strategies recommended by the curriculum."""
    methods: List[str]
    assessment_approach: List[AssessmentApproach]
    references: str

class MeasurementTool(BaseModel):
    """Instruments used in lab or physical measurements."""
    tool: str
    precision: str
    use: str

class CurriculumMetadata(BaseModel):
    """Administrative details of the curriculum document."""
    curriculum_year: int
    publisher: str
    language: str
    references: str

class CurriculumIntro(BaseModel):
    """General introduction to the curriculum."""
    description: str

class Evaluation(BaseModel):
    """Overall grading strategy combining internal and external components."""
    internal: Dict[str, Union[int, List[InternalAssessmentComponent]]]
    external: ExternalAssessment

class LearningCurriculum(BaseModel):
    """Full curriculum structure for a subject and grade."""
    subject: str
    grade: int
    credit_hours: int
    subject_code: str
    metadata: CurriculumMetadata
    introduction: CurriculumIntro
    objectives: List[Objective]
    scope_and_sequence: List[Unit]
    practical_activities: List[PracticalActivity]
    evaluation: Evaluation
    learning_facilitation: LearningFacilitation
    measurement_tools: List[MeasurementTool]

class CurriculumWrapper(BaseModel):
    """Wrapper for loading a full curriculum JSON into a single root object."""
    curriculum: LearningCurriculum

# -----------------------------
# ✅ USER + LEARNING MODELS: User data and learning session tracking
# -----------------------------

class UserInfo(BaseModel):
    """User profile information."""
    username: str
    age: Union[int, float, str]
    grade: Optional[Union[int, float, str]] = None
    id: Union[str, int]
    is_active: bool = True
    user_info: Optional[str] = Field(default='', description="Summarised User Info. ")

    class Config:
        from_attributes = True

class LearningResource(BaseModel):
    """A flattened topic extracted from curriculum and prepared for delivery or search."""
    subject: ResourceSubject
    grade: int
    unit: str
    topic_id: str
    topic: str
    description: str
    elaboration: Optional[str] = None
    keywords: List[str]
    hours: int
    references: str

    class Config:
        from_attributes = True

class UserProgress(BaseModel):
    """Tracks the user's progress on a specific topic or activity."""
    id: int
    user_id: Union[str, int]
    resource: LearningResource
    completed: bool = False
    completion_date: Optional[datetime] = None
    score: Optional[float] = None

    class Config:
        from_attributes = True

class ContentResponse(BaseModel):
    """Output generated by the LLM (lessons, quizzes, etc)."""
    content: str
    content_type: ContentType
    topic_id: Optional[str] = None
    keywords: Optional[List[str]] = None
    references: Optional[str] = None
    socratic_questions: Optional[List[str]] = None

    class Config:
        from_attributes = True

class HistoryEntry(BaseModel):
    """Logs a single user action (e.g., viewed content)."""
    user_id: Union[str, int]
    resource: LearningResource
    timestamp: datetime
    action: str

    class Config:
        from_attributes = True

class LearningState(BaseModel):
    """Tracks the session state of a user's learning journey across all nodes."""
    user: UserInfo
    current_resource: Optional[LearningResource] = None
    progress: List[UserProgress] = []
    topic_data: Optional[Dict] = None
    related_examples: Optional[List[str]] = None
    content_type: ContentType = ContentType.LESSON
    content: Optional[ContentResponse] = None
    next_action: Optional[str] = "lesson_selection"
    history: List[HistoryEntry] = []

    class Config:
        from_attributes = True