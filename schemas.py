from enum import Enum
from typing import Optional, Union, List, Dict
from pydantic import BaseModel, Field
from datetime import datetime

# Enum for subjects, extensible for future use
class ResourceSubject(str, Enum):
    PHYSICS = "physics"
    CHEMISTRY = "chemistry"
    MATH = "math"
    ENGLISH = "english"
    SCIENCE = "science"

# Enum for content types
class ContentType(str, Enum):
    LESSON = "lesson"
    QUIZ = "quiz"
    PROJECT = "project"
    PRACTICAL = "practical"

# User information model
class UserInfo(BaseModel):
    username: str = Field(description="The user's username or handle (e.g., Dip).")
    age: Union[int, float, str] = Field(
        description="The user's age. Can be an integer, float, or string (e.g., '22 years old').")
    grade: Optional[Union[int, float, str]] = Field(
        default=None,
        description="The user's grade level (e.g., 11, 12, or 'Grade 11').")
    id: Union[str, int] = Field(description="Unique identifier for the user.")
    is_active: bool = Field(default=True, description="Indicates if the user account is active.")

    class Config:
        from_attributes = True

# Enhanced Learning Resource model to map to curriculum JSON
class LearningResource(BaseModel):
    subject: ResourceSubject = Field(description="Subject of the resource, e.g., Physics.")
    grade: int = Field(description="Grade level (11 or 12).")
    unit: str = Field(description="Curriculum unit, e.g., Mechanics, Thermodynamics.")
    topic_id: str = Field(default='', description="Unique topic identifier from curriculum JSON, e.g., '2.5'.")
    topic: str = Field(description="Topic name, e.g., 'Derive expression for period of simple pendulum'.")
    description: str = Field(description="Brief description of the topic.")
    elaboration: Optional[str] = Field(
        default=None,
        description="Detailed explanation with real-world applications, e.g., 'Used in timekeeping devices.'"
    )
    keywords: List[str] = Field(description="Keywords for semantic search, e.g., ['pendulum', 'oscillation'].")
    hours: int = Field(description="Teaching hours allocated to the topic.")
    references: str = Field(description="Reference to curriculum source, e.g., 'Page 27'.")

    class Config:
        from_attributes = True

# Progress tracking for specific topics or activities
class UserProgress(BaseModel):
    id: int = Field(description="Unique progress entry ID.")
    user_id: Union[str, int] = Field(description="Reference to UserInfo.id.")
    resource: LearningResource = Field(description="The learning resource being tracked.")
    completed: bool = Field(default=False, description="Completion status of the topic.")
    completion_date: Optional[datetime] = Field(
        default=None,
        description="Date when the topic was completed."
    )
    score: Optional[float] = Field(
        default=None,
        description="Score or performance metric (e.g., quiz score out of 100)."
    )

    class Config:
        from_attributes = True

# Enhanced content response for RAG-generated output
class ContentResponse(BaseModel):
    content: str = Field(description="Markdown-formatted educational content generated by the model.")
    content_type: ContentType = Field(description="Type of content: lesson, quiz, project, or practical.")
    topic_id: Optional[str] = Field(
        default=None,
        description="Reference to the topic_id from LearningResource."
    )
    keywords: Optional[List[str]] = Field(
        default=None,
        description="Keywords associated with the content for retrieval."
    )
    references: Optional[str] = Field(
        default=None,
        description="Source references, e.g., 'Secondary Education Curriculum 2076, Page 27'."
    )
    socratic_questions: Optional[List[str]] = Field(
        default=None,
        description="Socratic-style questions to encourage critical thinking, e.g., 'How does pendulum period relate to gravity?'"
    )

    class Config:
        from_attributes = True

# History entry for tracking user interactions
class HistoryEntry(BaseModel):
    user_id: Union[str, int] = Field(description="Reference to UserInfo.id.")
    resource: LearningResource = Field(description="Resource accessed by the user.")
    timestamp: datetime = Field(description="Time of interaction.")
    action: str = Field(description="Action taken, e.g., 'viewed', 'completed', 'quiz_taken'.")

    class Config:
        from_attributes = True

# Learning state for managing userâ€™s learning journey
class LearningState(BaseModel):
    user: UserInfo = Field(description="User information.")
    current_resource: Optional[LearningResource] = Field(
        default=None,
        description="The current topic or resource being studied."
    )
    progress: List[UserProgress] = Field(
        default_factory=list,
        description="List of user progress entries for tracking completion."
    )
    topic_data: Optional[Dict] = Field(
        default=None,
        description="Additional topic metadata or embeddings for RAG retrieval."
    )
    related_examples: Optional[List[str]] = Field(
        default=None,
        description="Real-world examples related to the current topic, e.g., 'Planetary orbits for centripetal force.'"
    )
    content_type: ContentType = Field(
        default=ContentType.LESSON,
        description="Type of content being delivered: lesson, quiz, project, blog, or practical."
    )
    content: Optional[ContentResponse] = Field(
        default=None,
        description="Generated content for the current learning session."
    )
    next_action: Optional[str] = Field(
        default="lesson_selection",
        description="Suggested next action, e.g., 'next_topic', 'take_quiz', 'start_project'."
    )
    history: List[HistoryEntry] = Field(
        default_factory=list,
        description="History of user interactions with resources."
    )

    class Config:
        from_attributes = True