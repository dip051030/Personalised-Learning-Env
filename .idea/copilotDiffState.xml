<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/utils.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/utils.py" />
              <option name="updatedContent" value="import os&#10;import json&#10;import logging&#10;&#10;&#10;def save_learning_state_to_json(state, file_path):&#10;    &quot;&quot;&quot;&#10;    Save the details of the LearningState object to a JSON file.&#10;    If the file does not exist, it will be created.&#10;    Args:&#10;        state: LearningState object (should have .model_dump() or .dict() method)&#10;        file_path: Path to the JSON file&#10;    &quot;&quot;&quot;&#10;    try:&#10;        # Use model_dump if available (Pydantic v2), else fallback to dict&#10;        if hasattr(state, 'model_dump'):&#10;            state_data = state.model_dump()&#10;        elif hasattr(state, 'dict'):&#10;            state_data = state.dict()&#10;        else:&#10;            raise ValueError(&quot;State object does not support serialization.&quot;)&#10;        # Ensure the directory exists&#10;        os.makedirs(os.path.dirname(file_path), exist_ok=True)&#10;        with open(file_path, 'w', encoding='utf-8') as f:&#10;            json.dump(state_data, f, indent=4, ensure_ascii=False)&#10;        logging.info(f&quot;LearningState saved to {file_path}&quot;)&#10;    except Exception as e:&#10;        logging.error(f&quot;Failed to save LearningState to {file_path}: {e}&quot;)&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/utils/utils.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/utils/utils.py" />
              <option name="originalContent" value="import os&#10;import json&#10;import logging&#10;&#10;def save_learning_state_to_json(state, file_path):&#10;    &quot;&quot;&quot;&#10;    Save the details of the LearningState object or dict to a JSON file.&#10;    If the file does not exist, it will be created.&#10;    Args:&#10;        state: LearningState object (should have .model_dump() or .dict() method) or dict&#10;        file_path: Path to the JSON file&#10;    &quot;&quot;&quot;&#10;    try:&#10;        # Use model_dump(mode=&quot;json&quot;) for full serialization of nested models&#10;        if hasattr(state, 'model_dump'):&#10;            state_data = state.model_dump(mode=&quot;json&quot;)&#10;        elif hasattr(state, 'dict'):&#10;            state_data = state.dict()&#10;        elif isinstance(state, dict):&#10;            state_data = state&#10;        else:&#10;            raise ValueError(&quot;State object does not support serialization.&quot;)&#10;        dir_name = os.path.dirname(file_path)&#10;        if dir_name:&#10;            os.makedirs(dir_name, exist_ok=True)&#10;        with open(file_path, 'w', encoding='utf-8') as f:&#10;            json.dump(state_data, f, indent=4, ensure_ascii=False)&#10;        logging.info(f&quot;LearningState saved to {file_path}&quot;)&#10;    except Exception as e:&#10;        logging.error(f&quot;Failed to save LearningState to {file_path}: {e}&quot;)&#10;&#10;def save_generated_content(content, file_path):&#10;    &quot;&quot;&quot;&#10;    Save the generated content (string) to a separate file.&#10;    If the file's directory does not exist, it will be created.&#10;    Args:&#10;        content: The generated content as a string.&#10;        file_path: Path to the file where content will be saved.&#10;    &quot;&quot;&quot;&#10;    try:&#10;        dir_name = os.path.dirname(file_path)&#10;        if dir_name:&#10;            if not os.path.exists(dir_name):&#10;                os.makedirs(dir_name, exist_ok=True)&#10;        with open(file_path, 'w', encoding='utf-8') as f:&#10;            f.write(content)&#10;        logging.info(f&quot;Generated content saved to {file_path}&quot;)&#10;    except Exception as e:&#10;        logging.error(f&quot;Failed to save generated content to {file_path}: {e}&quot;)&#10;" />
              <option name="updatedContent" value="import os&#10;import json&#10;import logging&#10;&#10;def save_learning_state_to_json(state, file_path):&#10;    &quot;&quot;&quot;&#10;    Save the details of the LearningState object or dict to a JSON file.&#10;    If the file does not exist, it will be created.&#10;    Args:&#10;        state: LearningState object (should have .model_dump() or .dict() method) or dict&#10;        file_path: Path to the JSON file&#10;    &quot;&quot;&quot;&#10;    try:&#10;        # Always use model_dump(mode=&quot;json&quot;) for full serialization of nested models&#10;        if hasattr(state, 'model_dump'):&#10;            state_data = state.model_dump(mode=&quot;json&quot;)&#10;        elif hasattr(state, 'dict'):&#10;            state_data = state.dict()&#10;        elif isinstance(state, dict):&#10;            state_data = state&#10;        else:&#10;            raise ValueError(&quot;State object does not support serialization.&quot;)&#10;        dir_name = os.path.dirname(file_path)&#10;        if dir_name:&#10;            os.makedirs(dir_name, exist_ok=True)&#10;        with open(file_path, 'w', encoding='utf-8') as f:&#10;            json.dump(state_data, f, indent=4, ensure_ascii=False)&#10;        logging.info(f&quot;LearningState saved to {file_path}&quot;)&#10;    except Exception as e:&#10;        logging.error(f&quot;Failed to save LearningState to {file_path}: {e}&quot;)&#10;&#10;def save_generated_content(content, file_path):&#10;    &quot;&quot;&quot;&#10;    Save the generated content (string) to a separate file.&#10;    If the file's directory does not exist, it will be created.&#10;    Args:&#10;        content: The generated content as a string.&#10;        file_path: Path to the file where content will be saved.&#10;    &quot;&quot;&quot;&#10;    try:&#10;        dir_name = os.path.dirname(file_path)&#10;        if dir_name:&#10;            if not os.path.exists(dir_name):&#10;                os.makedirs(dir_name, exist_ok=True)&#10;        with open(file_path, 'w', encoding='utf-8') as f:&#10;            f.write(content)&#10;        logging.info(f&quot;Generated content saved to {file_path}&quot;)&#10;    except Exception as e:&#10;        logging.error(f&quot;Failed to save generated content to {file_path}: {e}&quot;)" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>