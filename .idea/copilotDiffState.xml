<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/schemas.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/schemas.py" />
              <option name="originalContent" value="from enum import Enum&#10;from typing import Optional, Union, List, Dict&#10;from pydantic import BaseModel, Field&#10;from datetime import datetime&#10;&#10;# -----------------------------&#10;# ✅ ENUMS: Standard subject and content types&#10;# -----------------------------&#10;&#10;class ResourceSubject(str, Enum):&#10;    &quot;&quot;&quot;Academic subjects supported by the system.&quot;&quot;&quot;&#10;    PHYSICS = &quot;physics&quot;&#10;    CHEMISTRY = &quot;chemistry&quot;&#10;    MATH = &quot;math&quot;&#10;    ENGLISH = &quot;english&quot;&#10;    SCIENCE = &quot;science&quot;&#10;&#10;class ContentType(str, Enum):&#10;    &quot;&quot;&quot;Types of educational content that can be generated or tracked.&quot;&quot;&quot;&#10;    LESSON = &quot;lesson&quot;&#10;    QUIZ = &quot;quiz&quot;&#10;    PROJECT = &quot;project&quot;&#10;    PRACTICAL = &quot;practical&quot;&#10;&#10;# -----------------------------&#10;# ✅ CURRICULUM MODELS: Structure of the official curriculum&#10;# -----------------------------&#10;&#10;class Topic(BaseModel):&#10;    &quot;&quot;&quot;Represents a single topic in a curriculum unit.&quot;&quot;&quot;&#10;    topic_id: str&#10;    description: str&#10;    elaboration: str&#10;    keywords: List[str]&#10;    hours: int&#10;    references: str&#10;&#10;class Unit(BaseModel):&#10;    &quot;&quot;&quot;Groups multiple related topics under one curriculum unit.&quot;&quot;&quot;&#10;    unit: str&#10;    topics: List[Topic]&#10;&#10;class Objective(BaseModel):&#10;    &quot;&quot;&quot;Defines learning objectives for the subject.&quot;&quot;&quot;&#10;    id: int&#10;    description: str&#10;&#10;class PracticalActivity(BaseModel):&#10;    &quot;&quot;&quot;Describes practical experiments or lab work in the syllabus.&quot;&quot;&quot;&#10;    id: int&#10;    description: str&#10;    unit: str&#10;    hours: int&#10;    elaboration: str&#10;    keywords: List[str]&#10;    references: str&#10;&#10;class InternalAssessmentComponent(BaseModel):&#10;    &quot;&quot;&quot;Details components of internal evaluation (e.g., class participation).&quot;&quot;&quot;&#10;    description: str&#10;    marks: int&#10;    elaboration: str&#10;&#10;class ExternalAssessment(BaseModel):&#10;    &quot;&quot;&quot;Structure of external board-level evaluation.&quot;&quot;&quot;&#10;    weightage: int&#10;    description: str&#10;    references: str&#10;&#10;class AssessmentApproach(BaseModel):&#10;    &quot;&quot;&quot;Skills-based evaluation methods used in learning facilitation.&quot;&quot;&quot;&#10;    type: str&#10;    description: str&#10;    marks: int&#10;    elaboration: str&#10;&#10;class LearningFacilitation(BaseModel):&#10;    &quot;&quot;&quot;Teaching methods and assessment strategies recommended by the curriculum.&quot;&quot;&quot;&#10;    methods: List[str]&#10;    assessment_approach: List[AssessmentApproach]&#10;    references: str&#10;&#10;class MeasurementTool(BaseModel):&#10;    &quot;&quot;&quot;Instruments used in lab or physical measurements.&quot;&quot;&quot;&#10;    tool: str&#10;    precision: str&#10;    use: str&#10;&#10;class CurriculumMetadata(BaseModel):&#10;    &quot;&quot;&quot;Administrative details of the curriculum document.&quot;&quot;&quot;&#10;    curriculum_year: int&#10;    publisher: str&#10;    language: str&#10;    references: str&#10;&#10;class CurriculumIntro(BaseModel):&#10;    &quot;&quot;&quot;General introduction to the curriculum.&quot;&quot;&quot;&#10;    description: str&#10;&#10;class Evaluation(BaseModel):&#10;    &quot;&quot;&quot;Overall grading strategy combining internal and external components.&quot;&quot;&quot;&#10;    internal: Dict[str, Union[int, List[InternalAssessmentComponent]]]&#10;    external: ExternalAssessment&#10;&#10;class LearningCurriculum(BaseModel):&#10;    &quot;&quot;&quot;Full curriculum structure for a subject and grade.&quot;&quot;&quot;&#10;    subject: str&#10;    grade: int&#10;    credit_hours: int&#10;    subject_code: str&#10;    metadata: CurriculumMetadata&#10;    introduction: CurriculumIntro&#10;    objectives: List[Objective]&#10;    scope_and_sequence: List[Unit]&#10;    practical_activities: List[PracticalActivity]&#10;    evaluation: Evaluation&#10;    learning_facilitation: LearningFacilitation&#10;    measurement_tools: List[MeasurementTool]&#10;&#10;class CurriculumWrapper(BaseModel):&#10;    &quot;&quot;&quot;Wrapper for loading a full curriculum JSON into a single root object.&quot;&quot;&quot;&#10;    curriculum: LearningCurriculum&#10;&#10;# -----------------------------&#10;# ✅ USER + LEARNING MODELS: User data and learning session tracking&#10;# -----------------------------&#10;&#10;class UserInfo(BaseModel):&#10;    &quot;&quot;&quot;User profile information.&quot;&quot;&quot;&#10;    username: str&#10;    age: Union[int, float, str]&#10;    grade: Optional[Union[int, float, str]] = None&#10;    id: Union[str, int]&#10;    is_active: bool = True&#10;    user_info: Optional[str] = Field(default='', description=&quot;Summarised User Info. &quot;)&#10;&#10;    class Config:&#10;        from_attributes = True&#10;&#10;class LearningResource(BaseModel):&#10;    &quot;&quot;&quot;A flattened topic extracted from curriculum and prepared for delivery or search.&quot;&quot;&quot;&#10;    subject: ResourceSubject&#10;    grade: int&#10;    unit: str&#10;    topic_id: str&#10;    topic: str&#10;    description: str&#10;    elaboration: Optional[str] = None&#10;    keywords: List[str] = []&#10;    hours: int&#10;    references: str&#10;&#10;    class Config:&#10;        from_attributes = True&#10;&#10;class UserProgress(BaseModel):&#10;    &quot;&quot;&quot;Tracks the user's progress on a specific topic or activity.&quot;&quot;&quot;&#10;    id: int&#10;    user_id: Union[str, int]&#10;    resource: LearningResource&#10;    completed: bool = False&#10;    completion_date: Optional[datetime] = None&#10;    score: Optional[float] = None&#10;&#10;    class Config:&#10;        from_attributes = True&#10;&#10;class ContentResponse(BaseModel):&#10;    &quot;&quot;&quot;Output generated by the LLM (lessons, quizzes, etc).&quot;&quot;&quot;&#10;    content: str&#10;&#10;    class Config:&#10;        from_attributes = True&#10;&#10;class HistoryEntry(BaseModel):&#10;    &quot;&quot;&quot;Logs a single user action (e.g., viewed content).&quot;&quot;&quot;&#10;    user_id: Union[str, int]&#10;    resource: LearningResource&#10;    timestamp: datetime&#10;    action: str&#10;&#10;    class Config:&#10;        from_attributes = True&#10;&#10;class EnrichedLearningResource(BaseModel):&#10;    &quot;&quot;&quot;An enriched version of a learning resource with LLM-generated summaries.&quot;&quot;&quot;&#10;    subject: ResourceSubject&#10;    grade: int&#10;    unit: str&#10;    topic_id: str&#10;    topic: str&#10;    description: str&#10;    elaboration: Optional[str] = None&#10;    keywords: List[str] = []&#10;    hours: int&#10;    references: str&#10;&#10;class FeedBack(BaseModel):&#10;    &quot;&quot;&quot;User feedback on generated content.&quot;&quot;&quot;&#10;    # resource: ContentResponse&#10;    rating: int = 1 # 1-5 scale&#10;    comments: Optional[str] = None&#10;    needed : bool = Field(default=True, description=&quot;True if feedback is needed else False&quot;)&#10;    gaps: Optional[List[str]] = Field(default=[], description=&quot;List of gaps in the content that need to be addressed&quot;)&#10;&#10;    class Config:&#10;        from_attributes = True&#10;&#10;class RouteSelector(BaseModel):&#10;    next_node: str&#10;&#10;class LearningState(BaseModel):&#10;    &quot;&quot;&quot;Tracks the session state of a user's learning journey across all nodes.&quot;&quot;&quot;&#10;    user: UserInfo&#10;    # resources: Optional[List[LearningResource]] = []&#10;    current_resource: Optional[LearningResource] = None&#10;    enriched_resource: Optional[EnrichedLearningResource] = None&#10;    progress: List[UserProgress] = []&#10;    topic_data: Optional[Dict] = None&#10;    related_examples: Optional[List[str]] = None&#10;    content_type: ContentType = ContentType.LESSON&#10;    content: Optional[ContentResponse] = None&#10;    next_action: Optional[RouteSelector] = Field(default=&quot;lesson_selection&quot;, description=&quot;Should return lesson_selection or blog_selection&quot;)&#10;    history: List[HistoryEntry] = []&#10;    feedback: Optional[FeedBack] = None&#10;    count: int = 0  # Counter to track number of nodes visited&#10;&#10;    class Config:&#10;        from_attributes = True&#10;" />
              <option name="updatedContent" value="from enum import Enum&#10;from typing import Optional, Union, List, Dict&#10;from pydantic import BaseModel, Field&#10;from datetime import datetime&#10;&#10;&#10;class ResourceSubject(str, Enum):&#10;    PHYSICS = &quot;physics&quot;&#10;    CHEMISTRY = &quot;chemistry&quot;&#10;    MATH = &quot;math&quot;&#10;    ENGLISH = &quot;english&quot;&#10;    SCIENCE = &quot;science&quot;&#10;&#10;&#10;class ContentType(str, Enum):&#10;    LESSON = &quot;lesson&quot;&#10;    QUIZ = &quot;quiz&quot;&#10;    PROJECT = &quot;project&quot;&#10;    PRACTICAL = &quot;practical&quot;&#10;&#10;&#10;class Topic(BaseModel):&#10;    topic_id: str&#10;    description: str&#10;    elaboration: str&#10;    keywords: List[str]&#10;    hours: int&#10;    references: str&#10;&#10;&#10;class Unit(BaseModel):&#10;    unit: str&#10;    topics: List[Topic]&#10;&#10;&#10;class Objective(BaseModel):&#10;    id: int&#10;    description: str&#10;&#10;&#10;class PracticalActivity(BaseModel):&#10;    id: int&#10;    description: str&#10;    unit: str&#10;    hours: int&#10;    elaboration: str&#10;    keywords: List[str]&#10;    references: str&#10;&#10;&#10;class InternalAssessmentComponent(BaseModel):&#10;    description: str&#10;    marks: int&#10;    elaboration: str&#10;&#10;&#10;class ExternalAssessment(BaseModel):&#10;    weightage: int&#10;    description: str&#10;    references: str&#10;&#10;&#10;class AssessmentApproach(BaseModel):&#10;    type: str&#10;    description: str&#10;    marks: int&#10;    elaboration: str&#10;&#10;&#10;class LearningFacilitation(BaseModel):&#10;    methods: List[str]&#10;    assessment_approach: List[AssessmentApproach]&#10;    references: str&#10;&#10;&#10;class MeasurementTool(BaseModel):&#10;    tool: str&#10;    precision: str&#10;    use: str&#10;&#10;&#10;class CurriculumMetadata(BaseModel):&#10;    curriculum_year: int&#10;    publisher: str&#10;    language: str&#10;    references: str&#10;&#10;&#10;class CurriculumIntro(BaseModel):&#10;    description: str&#10;&#10;&#10;class Evaluation(BaseModel):&#10;    internal: Dict[str, Union[int, List[InternalAssessmentComponent]]]&#10;    external: ExternalAssessment&#10;&#10;&#10;class LearningCurriculum(BaseModel):&#10;    subject: str&#10;    grade: int&#10;    credit_hours: int&#10;    subject_code: str&#10;    metadata: CurriculumMetadata&#10;    introduction: CurriculumIntro&#10;    objectives: List[Objective]&#10;    scope_and_sequence: List[Unit]&#10;    practical_activities: List[PracticalActivity]&#10;    evaluation: Evaluation&#10;    learning_facilitation: LearningFacilitation&#10;    measurement_tools: List[MeasurementTool]&#10;&#10;&#10;class CurriculumWrapper(BaseModel):&#10;    curriculum: LearningCurriculum&#10;&#10;&#10;class UserInfo(BaseModel):&#10;    username: str&#10;    age: Union[int, float, str]&#10;    grade: Optional[Union[int, float, str]] = None&#10;    id: Union[str, int]&#10;    is_active: bool = True&#10;    user_info: Optional[str] = Field(default='', description=&quot;Summarised User Info. &quot;)&#10;&#10;    class Config:&#10;        from_attributes = True&#10;&#10;&#10;class LearningResource(BaseModel):&#10;    subject: ResourceSubject&#10;    grade: int&#10;    unit: str&#10;    topic_id: str&#10;    topic: str&#10;    description: str&#10;    elaboration: Optional[str] = None&#10;    keywords: List[str] = []&#10;    hours: int&#10;    references: str&#10;&#10;    class Config:&#10;        from_attributes = True&#10;&#10;&#10;class UserProgress(BaseModel):&#10;    id: int&#10;    user_id: Union[str, int]&#10;    resource: LearningResource&#10;    completed: bool = False&#10;    completion_date: Optional[datetime] = None&#10;    score: Optional[float] = None&#10;&#10;    class Config:&#10;        from_attributes = True&#10;&#10;&#10;class ContentResponse(BaseModel):&#10;    content: str&#10;&#10;    class Config:&#10;        from_attributes = True&#10;&#10;&#10;class HistoryEntry(BaseModel):&#10;    user_id: Union[str, int]&#10;    resource: LearningResource&#10;    timestamp: datetime&#10;    action: str&#10;&#10;    class Config:&#10;        from_attributes = True&#10;&#10;&#10;class EnrichedLearningResource(BaseModel):&#10;    subject: ResourceSubject&#10;    grade: int&#10;    unit: str&#10;    topic_id: str&#10;    topic: str&#10;    description: str&#10;    elaboration: Optional[str] = None&#10;    keywords: List[str] = []&#10;    hours: int&#10;    references: str&#10;&#10;&#10;class FeedBack(BaseModel):&#10;    rating: int = 1&#10;    comments: Optional[str] = None&#10;    needed: bool = Field(default=True, description=&quot;True if feedback is needed else False&quot;)&#10;    gaps: Optional[List[str]] = Field(default=[], description=&quot;List of gaps in the content that need to be addressed&quot;)&#10;&#10;    class Config:&#10;        from_attributes = True&#10;&#10;&#10;class RouteSelector(BaseModel):&#10;    next_node: str&#10;&#10;&#10;class LearningState(BaseModel):&#10;    user: UserInfo&#10;    current_resource: Optional[LearningResource] = None&#10;    enriched_resource: Optional[EnrichedLearningResource] = None&#10;    progress: List[UserProgress] = []&#10;    topic_data: Optional[Dict] = None&#10;    related_examples: Optional[List[str]] = None&#10;    content_type: ContentType = ContentType.LESSON&#10;    content: Optional[ContentResponse] = None&#10;    next_action: Optional[RouteSelector] = Field(default=&quot;lesson_selection&quot;, description=&quot;Should return lesson_selection or blog_selection&quot;)&#10;    history: List[HistoryEntry] = []&#10;    feedback: Optional[FeedBack] = None&#10;    count: int = 0&#10;&#10;    class Config:&#10;        from_attributes = True" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/utils.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/utils.py" />
              <option name="updatedContent" value="import os&#10;import json&#10;import logging&#10;&#10;&#10;def save_learning_state_to_json(state, file_path):&#10;    &quot;&quot;&quot;&#10;    Save the details of the LearningState object to a JSON file.&#10;    If the file does not exist, it will be created.&#10;    Args:&#10;        state: LearningState object (should have .model_dump() or .dict() method)&#10;        file_path: Path to the JSON file&#10;    &quot;&quot;&quot;&#10;    try:&#10;        # Use model_dump if available (Pydantic v2), else fallback to dict&#10;        if hasattr(state, 'model_dump'):&#10;            state_data = state.model_dump()&#10;        elif hasattr(state, 'dict'):&#10;            state_data = state.dict()&#10;        else:&#10;            raise ValueError(&quot;State object does not support serialization.&quot;)&#10;        # Ensure the directory exists&#10;        os.makedirs(os.path.dirname(file_path), exist_ok=True)&#10;        with open(file_path, 'w', encoding='utf-8') as f:&#10;            json.dump(state_data, f, indent=4, ensure_ascii=False)&#10;        logging.info(f&quot;LearningState saved to {file_path}&quot;)&#10;    except Exception as e:&#10;        logging.error(f&quot;Failed to save LearningState to {file_path}: {e}&quot;)&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>